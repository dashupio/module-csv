<connect-csv-config>
  <!-- FILE UPLOAD -->
  <div class="card mb-3" if={ !props.connect.file }>
    <div class="card-body">
      <label class="form-label">
        Upload CSV
      </label>
      <upload type="file" name={ props.connect.uuid } image={ props.connect.file } col="col-4" on-change={ onUploaded } />
    </div>
  </div>
  <!-- / FILE UPLOAD -->

  <!-- FILE INFO -->
  <div if={ props.connect.file } class="card card-sm bg-white mb-3">
    <div class="card-body d-flex flex-row">
      <div class="text-overflow flex-1">
        <b>{ props.connect.file.name }</b>
        <small class="d-block">
          Created { moment(props.connect.file.created).fromNow() }
        </small>
      </div>
      <div class="flex-0 align-items-center">
        <button class="btn btn-danger" onclick={ (e) => onUploaded([]) }>
          <i class="fa fa-times" />
        </button>
      </div>
    </div>
  </div>
  <!-- / FILE INFO -->

  <!-- FILE CONFIG -->
  <div if={ props.connect.file } class="card mb-3">
    <div class="card-body">
      <div if={ state.loading } class="text-center">
        <i class="h1 fa fa-spinner fa-spin my-5" />
      </div>
      
      <div if={ !state.loading }>
        <div class="mb-3">
          <label class="form-label">
            Select Identifier Field
          </label>
          <eden-select on-change={ (e, v) => onIdentifier(v) } placeholder="Select Identifier" data={ getIdentifier() } />
        </div>

        <div if={ state.loading } class="text-center">
          <i class="h1 fa fa-spinner fa-spin my-5" />
        </div>
        <div if={ !state.loading && state.fields }>
          <div each={ (field, i) in state.fields } class="card bg-white mb-2">
            <div class="card-body">
              <div class="row">
                <div class="col-6 d-flex align-items-center">
                  <div>
                    <b>{ field.key }</b>
                    <small class="d-block">{ field.value }</small>
                  </div>
                </div>
                <div class="col-6">
                  <eden-select on-change={ (e, val) => onField(field.key, val) } placeholder="Select Field" data={ getField(field) } />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="text-right">
        <button class={ `btn btn-success${state.syncing ? ' disabled' : ''}` } onclick={ (e) => onSync(e) }>
          { state.syncing ? (state.sync ? `Synced ${state.sync.done} of ${state.sync.total}` : 'Syncing Data...') : 'Sync Data' }
        </button>
      </div>

    </div>
  </div>
  <!-- / FILE CONFIG -->

  <script>
    // import base
    import moment from 'moment';

    /**
     * export default
     */
    export default class ConnectSheetsConfig {

      /**
       * on before mount
       */
      onBeforeMount() {
        // on before mount
        this.load = this.load.bind(this);
        this.onSyncing = this.onSyncing.bind(this);
        this.onUploaded = this.onUploaded.bind(this);

        // mixins
        this.moment = moment;
      }

      /**
       * on before unmount
       */
      onBeforeUnmount() {
        // sync
        this.props.dashup.socket.off(`connect.${this.props.connect.uuid}`, this.onSyncing);
      }

      /**
       * on mounted
       */
      onMounted() {
        // load
        this.load();

        // sync
        this.props.dashup.socket.on(`connect.${this.props.connect.uuid}`, this.onSyncing);
      }

      /**
       * on updated
       */
      onUpdated() {
        // load
        this.load();
      }

      /**
       * on uploaded
       */
      onUploaded(val) {
        // set channel
        this.props.set('file', (val || []).pop());
      }

      /**
       * on sync
       */
      onSyncing(sync) {
        // update sync
        this.update({
          sync,
        });
      }

      /**
       * pull
       */
      async onSync(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // pull
        this.update({
          syncing : true,
        });

        // sync
        await this.props.dashup.action({
          type   : 'connect',
          struct : 'csv',
        }, 'sync', this.props.connect, {
          page  : this.props.page.get('_id'),
          form  : this.props.page.get('data.forms.0'),
          model : this.props.page.get('data.model') || this.props.page.get('_id'),
        });

        // pull
        this.update({
          sync    : false,
          syncing : false,
        });
        this.props.page.emit('do.page', new Date());
      }

      /**
       * on field
       */
      onField(key, uuid) {
        // fields
        const fields = this.props.connect.fields || {};

        // set value
        fields[uuid] = key;

        // set sheet
        this.props.set('fields', fields);
      }

      /**
       * on connect
       */
      onIdentifier(val) {
        // set channel
        this.props.set('identifier', val);
      }

      /**
       * get identifier
       */
      getIdentifier() {
        // keys
        return Object.keys(this.props.connect.fields || {}).map((uuid) => {
          // get field
          const field = this.props.context.fields.find((f) => f.uuid === uuid);

          // return
          return field ? {
            name     : `${field.label || field.name} === ${this.props.connect.fields[uuid]}`,
            value    : field.uuid,
            selected : this.props.connect.identifier === field.uuid,
          } : null;
        }).filter((f) => f);
      }

      /**
       * get field
       */
      getField(f) {
        // return value
        return [...(this.props.context.fields)].map((field) => {
          // return fields
          return {
            name     : field.label || field.name,
            value    : field.uuid,
            selected : (this.props.connect.fields || {})[field.uuid] === f.key,
          };
        });
      }

      /**
       * load files
       */
      async load() {
        // check loading
        if (this.loading) return;
        if (this.state.fields) return;
        if (!this.props.connect.file) return;

        // loading
        this.loading = true;

        // loading
        this.update({
          loading : true,
        });

        // update
        this.update({
          sync    : false,
          loading : false,
          fields  : (await this.props.dashup.action({
            type   : 'connect',
            struct : 'csv',
          }, 'fields', this.props.connect, {})),
        });

        // loading
        this.loading = false;
      }
    }
  </script>
</connect-csv-config>